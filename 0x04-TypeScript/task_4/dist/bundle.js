!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t),r.d(t,"cpp",(function(){return s})),r.d(t,"java",(function(){return p})),r.d(t,"react",(function(){return h})),r.d(t,"cTeacher",(function(){return y}));var n,o=function(){function e(){}return e.prototype.setTeacher=function(e){this.teacher=e},e}(),i=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.getRequirements=function(){return"Here is the list of requirements for Cpp"},t.prototype.getAvailableTeacher=function(){return!this.teacher||void 0===this.teacher.experienceTeachingC||this.teacher.experienceTeachingC<=0?"No available teacher":"Available Teacher: "+this.teacher.firstName},t}(o),a=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(t,r)};return function(t,r){function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.getRequirements=function(){return"Here is the list of requirements for Java"},t.prototype.getAvailableTeacher=function(){return!this.teacher||void 0===this.teacher.experienceTeachingReact||this.teacher.experienceTeachingReact<=0?"No available teacher":"Available Teacher: "+this.teacher.firstName},t}(o),l=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(t,r)};return function(t,r){function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return l(t,e),t.prototype.getRequirements=function(){return"Here is the list of requirements for React"},t.prototype.getAvailableTeacher=function(){return!this.teacher||void 0===this.teacher.experienceTeachingC||this.teacher.experienceTeachingC<=0?"No available teacher":"Available Teacher: "+this.teacher.firstName},t}(o),s=new c,p=new u,h=new f,y={firstName:"John",lastName:"Doe",experienceTeachingC:10};console.log("C++"),s.setTeacher(y),console.log(s.getRequirements()),console.log(s.getAvailableTeacher()),console.log("Java"),p.setTeacher(y),console.log(p.getRequirements()),console.log(p.getAvailableTeacher()),console.log("React"),h.setTeacher(y),console.log(h.getRequirements()),console.log(h.getAvailableTeacher())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vanMvc3ViamVjdHMvU3ViamVjdC50cyIsIndlYnBhY2s6Ly8vLi9qcy9zdWJqZWN0cy9DcHAudHMiLCJ3ZWJwYWNrOi8vLy4vanMvc3ViamVjdHMvSmF2YS50cyIsIndlYnBhY2s6Ly8vLi9qcy9zdWJqZWN0cy9SZWFjdC50cyIsIndlYnBhY2s6Ly8vLi9qcy9tYWluLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwic2V0VGVhY2hlciIsInRlYWNoZXIiLCJ0aGlzIiwiZ2V0UmVxdWlyZW1lbnRzIiwiZ2V0QXZhaWxhYmxlVGVhY2hlciIsInVuZGVmaW5lZCIsImV4cGVyaWVuY2VUZWFjaGluZ0MiLCJmaXJzdE5hbWUiLCJTdWJqZWN0IiwiZXhwZXJpZW5jZVRlYWNoaW5nUmVhY3QiLCJDcHAiLCJqYXZhIiwicmVhY3QiLCJjVGVhY2hlciIsImxhc3ROYW1lIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdI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QUNYTyxTQUFVLE1BQ1ZSLG9CQUFxQixJQUd6QlMsUUFBUUMsSUFBSSxPQUNaLEVBQUloQixXQUFXYSxHQUNmRSxRQUFRQyxJQUFJLEVBQUliLG1CQUNoQlksUUFBUUMsSUFBSSxFQUFJWix1QkFFaEJXLFFBQVFDLElBQUksUUFDWkwsRUFBS1gsV0FBV2EsR0FDaEJFLFFBQVFDLElBQUlMLEVBQUtSLG1CQUNqQlksUUFBUUMsSUFBSUwsRUFBS1AsdUJBRWpCVyxRQUFRQyxJQUFJLFNBQ1pKLEVBQU1aLFdBQVdhLEdBQ2pCRSxRQUFRQyxJQUFJSixFQUFNVCxtQkFDbEJZLFFBQVFDLElBQUlKLEVBQU1SIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImltcG9ydCB7IFRlYWNoZXIgfSBmcm9tICcuL1RlYWNoZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN1YmplY3QgIHtcclxuICAgIHRlYWNoZXI6IFRlYWNoZXI7XHJcblxyXG4gICAgc2V0VGVhY2hlcih0ZWFjaGVyOiBUZWFjaGVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy50ZWFjaGVyID0gdGVhY2hlcjtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuL1N1YmplY3QnO1xyXG5cclxuLy8gRGVjbGFyYXRpb24gbWVyZ2luZyB0byBhZGQgZXhwZXJpZW5jZVRlYWNoaW5nQyB0byBUZWFjaGVyIGludGVyZmFjZVxyXG5kZWNsYXJlIG1vZHVsZSAnLi9UZWFjaGVyJyB7XHJcbiAgICBpbnRlcmZhY2UgVGVhY2hlciB7XHJcbiAgICAgICAgZXhwZXJpZW5jZVRlYWNoaW5nQz86IG51bWJlcjtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgY3BwIGV4dGVuZHMgU3ViamVjdCB7XHJcbiAgICBnZXRSZXF1aXJlbWVudHMoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gJ0hlcmUgaXMgdGhlIGxpc3Qgb2YgcmVxdWlyZW1lbnRzIGZvciBDcHAnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEF2YWlsYWJsZVRlYWNoZXIoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoIXRoaXMudGVhY2hlciB8fCB0aGlzLnRlYWNoZXIuZXhwZXJpZW5jZVRlYWNoaW5nQyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMudGVhY2hlci5leHBlcmllbmNlVGVhY2hpbmdDIDw9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuICdObyBhdmFpbGFibGUgdGVhY2hlcic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgQXZhaWxhYmxlIFRlYWNoZXI6ICR7dGhpcy50ZWFjaGVyLmZpcnN0TmFtZX1gO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcHA7IiwiaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4vU3ViamVjdCc7XHJcblxyXG4vLyBEZWNsYXJhdGlvbiBtZXJnaW5nIHRvIGFkZCBleHBlcmllbmNlVGVhY2hpbmdKYXZhIHRvIFRlYWNoZXIgaW50ZXJmYWNlXHJcbmRlY2xhcmUgbW9kdWxlICcuL1RlYWNoZXInIHtcclxuICAgIGludGVyZmFjZSBUZWFjaGVyIHtcclxuICAgICAgICBleHBlcmllbmNlVGVhY2hpbmdKYXZhPzogbnVtYmVyO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSmF2YSBleHRlbmRzIFN1YmplY3Qge1xyXG4gICAgZ2V0UmVxdWlyZW1lbnRzKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdIZXJlIGlzIHRoZSBsaXN0IG9mIHJlcXVpcmVtZW50cyBmb3IgSmF2YSc7XHJcbiAgICB9XHJcbiAgICBnZXRBdmFpbGFibGVUZWFjaGVyKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnRlYWNoZXIgfHwgdGhpcy50ZWFjaGVyLmV4cGVyaWVuY2VUZWFjaGluZ1JlYWN0ID09PSB1bmRlZmluZWQgfHwgdGhpcy50ZWFjaGVyLmV4cGVyaWVuY2VUZWFjaGluZ1JlYWN0IDw9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuICdObyBhdmFpbGFibGUgdGVhY2hlcic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgQXZhaWxhYmxlIFRlYWNoZXI6ICR7dGhpcy50ZWFjaGVyLmZpcnN0TmFtZX1gO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEphdmE7XHJcblxyXG4gICAgIiwiaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4vU3ViamVjdCc7XHJcblxyXG4vLyBEZWNsYXJhdGlvbiBtZXJnaW5nIHRvIGFkZCBleHBlcmllbmNlVGVhY2hpbmdSZWFjdCB0byBUZWFjaGVyIGludGVyZmFjZVxyXG5kZWNsYXJlIG1vZHVsZSAnLi9UZWFjaGVyJyB7XHJcbiAgICBpbnRlcmZhY2UgVGVhY2hlciB7XHJcbiAgICAgICAgZXhwZXJpZW5jZVRlYWNoaW5nUmVhY3Q/OiBudW1iZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZWFjdCBleHRlbmRzIFN1YmplY3Qge1xyXG4gICAgZ2V0UmVxdWlyZW1lbnRzKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdIZXJlIGlzIHRoZSBsaXN0IG9mIHJlcXVpcmVtZW50cyBmb3IgUmVhY3QnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEF2YWlsYWJsZVRlYWNoZXIoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoIXRoaXMudGVhY2hlciB8fCB0aGlzLnRlYWNoZXIuZXhwZXJpZW5jZVRlYWNoaW5nQyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMudGVhY2hlci5leHBlcmllbmNlVGVhY2hpbmdDIDw9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuICdObyBhdmFpbGFibGUgdGVhY2hlcic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgQXZhaWxhYmxlIFRlYWNoZXI6ICR7dGhpcy50ZWFjaGVyLmZpcnN0TmFtZX1gO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSZWFjdDsiLCJpbXBvcnQgQ3BwIGZyb20gJy4vc3ViamVjdHMvQ3BwJztcclxuaW1wb3J0IEphdmEgZnJvbSAnLi9zdWJqZWN0cy9KYXZhJztcclxuaW1wb3J0IFJlYWN0IGZyb20gJy4vc3ViamVjdHMvUmVhY3QnO1xyXG5pbXBvcnQgeyBUZWFjaGVyIH0gZnJvbSAnLi9zdWJqZWN0cy9UZWFjaGVyJztcclxuXHJcbmV4cG9ydCBjb25zdCBjcHAgPSBuZXcgQ3BwKCk7XHJcbmV4cG9ydCBjb25zdCBqYXZhID0gbmV3IEphdmEoKTtcclxuZXhwb3J0IGNvbnN0IHJlYWN0ID0gbmV3IFJlYWN0KCk7XHJcblxyXG5leHBvcnQgY29uc3QgY1RlYWNoZXI6IFRlYWNoZXIgJiB7IGV4cGVyaWVuY2VUZWFjaGluZ0M/OiBudW1iZXIgfSA9IHtcclxuICAgIGZpcnN0TmFtZTogJ0pvaG4nLFxyXG4gICAgbGFzdE5hbWU6ICdEb2UnLFxyXG4gICAgZXhwZXJpZW5jZVRlYWNoaW5nQzogMTAsXHJcbn07XHJcblxyXG5jb25zb2xlLmxvZygnQysrJyk7XHJcbmNwcC5zZXRUZWFjaGVyKGNUZWFjaGVyKTtcclxuY29uc29sZS5sb2coY3BwLmdldFJlcXVpcmVtZW50cygpKTtcclxuY29uc29sZS5sb2coY3BwLmdldEF2YWlsYWJsZVRlYWNoZXIoKSk7XHJcblxyXG5jb25zb2xlLmxvZygnSmF2YScpO1xyXG5qYXZhLnNldFRlYWNoZXIoY1RlYWNoZXIpO1xyXG5jb25zb2xlLmxvZyhqYXZhLmdldFJlcXVpcmVtZW50cygpKTtcclxuY29uc29sZS5sb2coamF2YS5nZXRBdmFpbGFibGVUZWFjaGVyKCkpO1xyXG5cclxuY29uc29sZS5sb2coJ1JlYWN0Jyk7XHJcbnJlYWN0LnNldFRlYWNoZXIoY1RlYWNoZXIpO1xyXG5jb25zb2xlLmxvZyhyZWFjdC5nZXRSZXF1aXJlbWVudHMoKSk7XHJcbmNvbnNvbGUubG9nKHJlYWN0LmdldEF2YWlsYWJsZVRlYWNoZXIoKSk7Il0sInNvdXJjZVJvb3QiOiIifQ==